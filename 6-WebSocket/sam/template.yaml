Transform: AWS::Serverless-2016-10-31
Description: Websockets API powered by API Gateway and Lambda

Resources:
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: "clap-app-websocket"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "execute-api:ManageConnections"
                Resource:
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  AllowDynamoDBStreamSource:
    Type: AWS::IAM::Policy
    DependsOn:
      - LambdaExecutionRole
    Properties:
      PolicyName: 'AllowDynamoDBStreamSource'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:DescribeStream
              - dynamodb:ListStreams
            Resource:
              - Fn::ImportValue: clap-app-posts-comments-table-stream-arn
      Roles:
        - !Ref LambdaExecutionRole

  SocketFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "clap-app-websockets-on-connect"
      CodeUri: ../build
      Handler: socket-lambda.handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          ENDPOINT:
            Fn::Join:
              - ""
              - - Ref: WebSocketApi
                - .execute-api.
                - Ref: AWS::Region
                - .amazonaws.com/
                - production

  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - SocketFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketFunction
      Principal: apigateway.amazonaws.com

  SocketFunctionIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration to socket lambda
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketFunction.Arn}/invocations

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      OperationName: ConnectRoute
      AuthorizationType: NONE
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SocketFunctionIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SocketFunctionIntegration

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SocketFunctionIntegration

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - DefaultRoute
      - SocketFunction
    Properties:
      ApiId: !Ref WebSocketApi
      Description: "clap-app socket api gateway Deployment"

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn: [Deployment]
    Properties:
      StageName: production
      Description: "production stage"
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi
      DefaultRouteSettings:
        DetailedMetricsEnabled: false
        LoggingLevel: OFF
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10


  SocketSendNewCommentLambdaLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: socket-send-new-comment-lambda.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          ENDPOINT:
            Fn::Join:
              - ""
              - - Ref: WebSocketApi
                - .execute-api.
                - Ref: AWS::Region
                - .amazonaws.com/
                - production

  SocketSendNewCommentLambdaStreamEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - AllowDynamoDBStreamSource
    Properties:
      EventSourceArn:
        Fn::ImportValue: clap-app-posts-comments-table-stream-arn
      FunctionName: !GetAtt SocketSendNewCommentLambdaLambda.Arn
      StartingPosition: 'TRIM_HORIZON'

  SocketSendNewNotificationLambdaLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: socket-send-new-notification-lambda.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          ENDPOINT:
            Fn::Join:
              - ""
              - - Ref: WebSocketApi
                - .execute-api.
                - Ref: AWS::Region
                - .amazonaws.com/
                - production

  SocketSendNewNotificationLambdaStreamEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - AllowDynamoDBStreamSource
    Properties:
      EventSourceArn:
        Fn::ImportValue: clap-app-notifications-table-stream-arn
      FunctionName: !GetAtt SocketSendNewNotificationLambdaLambda.Arn
      StartingPosition: 'TRIM_HORIZON'


  SocketSendNewLikeLambdaLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: socket-send-new-like-lambda.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          ENDPOINT:
            Fn::Join:
              - ""
              - - Ref: WebSocketApi
                - .execute-api.
                - Ref: AWS::Region
                - .amazonaws.com/
                - production

  SocketSendNewLikeLambdaStreamEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - AllowDynamoDBStreamSource
    Properties:
      EventSourceArn:
        Fn::ImportValue: clap-app-posts-likes-table-stream-arn
      FunctionName: !GetAtt SocketSendNewLikeLambdaLambda.Arn
      StartingPosition: 'TRIM_HORIZON'

Outputs:
  SocketFunctionArn:
    Description: "Socket function ARN"
    Value: !GetAtt SocketFunction.Arn
